{"version":3,"file":"article.service.js","sourceRoot":"","sources":["../../home/duc/angular2-quickstart/web-rss-frontend/tmp/broccoli_type_script_compiler-input_base_path-brJ7QIW9.tmp/0/src/app/services/article.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Response,URLSearchParams} from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport {Article} from '../';\nimport {HttpMethod} from '../shared/HttpMethod';\n\n@Injectable()\nexport class ArticleService {\n    private articleUrl = '/rss-app/article';\n    private sessionUser = 'myuser';\n\n    constructor(private http: HttpMethod) { }\n\n    /**\n     * hàm dùng để yêu cầu delete 1 article \n     * \n     * @param {Article} article\n     * @returns {Promise<Article>}\n     */\n    deleteArticle(article: Article): Promise<Article> {\n        let url = this.articleUrl.concat('/delete/', this.sessionUser, '/');\n        let param = new URLSearchParams();\n        param.append('feedTitle',article.feedTitle);\n        param.append('articleTitle',article.title);\n        console.log('the link: ' + url);\n        return this.http.delete(url,param).then(res => article)\n            .catch(error => {\n                console.error('deleteArticle error: ' + error);\n                return null;\n            });\n    }\n\n    /**\n     * hàm dùng để yêu cầu delete các\n     * articles \n     * \n     * @param {Article[]} articles\n     * @returns {Promise<Article[]>}\n     */\n    deleteArticles(articles: Article[]): Promise<Article[]> {\n        let url = this.articleUrl.concat('/deletes/', this.sessionUser, '/');\n        let param = new URLSearchParams();\n        param.append('feedTitle',articles[0].feedTitle);\n        let json = [];\n        articles.forEach(a => json.push(a.title));\n        return this.http.put(JSON.stringify(json), url,param)\n            .then(res => {\n                console.log('deleteArticles response body: ' + res.text());\n                return articles;\n            })\n            .catch(error => {\n                console.error('deleteArticles error: ' + error);\n                return null;\n            });\n    }\n\n    /**\n     * hàm dùng để yêu cầu update giá trị isRead\n     * của articles \n     * \n     * @param {Article[]} articles các articles cần update\n     * @returns {Promise<Article[]>} \n     */\n    updateArticles(articles: Article[]): Promise<Article[]> {\n        let url = this.articleUrl.concat('/updates/', this.sessionUser, '/');\n        let param = new URLSearchParams();\n        param.append('feedTitle',articles[0].feedTitle);\n        let json = [];\n        articles.forEach(a => json.push(a.title));\n        return this.http.put(JSON.stringify(json), url,param)\n            .then(res => articles)\n            .catch(error => {\n                console.error('updateArticles error: ' + error);\n                return null;\n            });\n    }\n\n    updateArticle(article: Article): Promise<Article> {\n        let url = this.articleUrl.concat('/update/', this.sessionUser,'/');\n        let param = new URLSearchParams();\n        param.append('feedTitle',article.feedTitle);\n        param.append('articleTitle',article.title);\n        param.append('isRead',''+article.isRead);\n        return this.http.put('', url,param)\n            .then(res => article)\n            .catch(error => {\n                console.error('updateArticle error: ' + error);\n                return null;\n            });\n    }\n}"]}