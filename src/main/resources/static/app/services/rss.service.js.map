{"version":3,"file":"rss.service.js","sourceRoot":"","sources":["../../home/duc/angular2-quickstart/web-rss-frontend/tmp/broccoli_type_script_compiler-input_base_path-brJ7QIW9.tmp/0/src/app/services/rss.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable,Inject} from '@angular/core';\nimport {Response} from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport {Feed,Utility} from '../index';\nimport {HttpMethod} from '../shared/HttpMethod';\n\n\nconst manyRss = [];\n\n@Injectable()\nexport class RssService {\n    private rssUrl = '/rss-app';\n    private sessionUser = 'myuser';\n\n    constructor(\n       private http: HttpMethod\n    ) { }\n\n    // get array of rss\n    getManyRss(): Promise<Feed[]> {\n        return this.http.get(this.rssUrl + '/' + this.sessionUser)\n            .then(res => {\n                let obj = JSON.parse(res.text(), Utility.parseJsonToFeed);\n                let feeds: Feed[] = [];\n                for (let i in obj) {\n                    feeds.push(new Feed(obj[i]));\n                }\n                return feeds;\n            })\n            .catch(err => {\n                console.error('getManyRss: error ' + err);\n                return null;\n            });\n\n    }\n\n    // add new link\n    addLink(link: string): Promise<Feed> {\n        let json = {\n            'link': link,\n            'user': this.sessionUser\n        };\n        return this.http.post(JSON.stringify(json), this.rssUrl).then(res => {\n            let obj = JSON.parse(res.text(), Utility.parseJsonToFeed);\n            let feed = new Feed(obj);\n            return feed;\n        }).catch(err => {\n            console.error('addLink: an error ' + err);\n            return null;\n        });\n    }\n\n    // refesh the feed\n    refeshFeed(feed: Feed): Promise<Feed> {\n        let json = {\n            'user': this.sessionUser,\n            'feed': feed\n        };\n\n        return this.http.put(JSON.stringify(json), this.rssUrl)\n            .then((res) => {\n                let obj = JSON.parse(res.text(),Utility.parseJsonToFeed);\n                let feed = new Feed(obj);\n                return feed;\n            })\n            .catch(error => {\n                console.error('refeshFeed: ' + error);\n                return null;\n            });\n    }\n\n    deleteFeed(feed: Feed): Promise<Feed> {\n            let url = this.rssUrl + '?link=' + feed.link + '&user=' + this.sessionUser;\n\n            return this.http.delete(url)\n                .then(res => feed)\n                .catch(error => {\n                    console.error('deleteFeed co error: ' + error);\n                    return null;\n                });\n    }\n}\n\n\n"]}