{"version":3,"file":"rss.service.js","sourceRoot":"","sources":["../../home/duc/angular2-quickstart/web-rss-frontend/tmp/broccoli_type_script_compiler-input_base_path-5TKuUIT7.tmp/0/src/app/services/rss.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Headers, Http, Response} from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport {Feed} from '../model/Feed';\nimport {Utility} from '../model/Utility';\n\n\nconst manyRss = [];\n\n@Injectable()\nexport class RssService {\n    private rssUrl = '/rss-app';\n    private sessionUser = 'myuser';\n\n    constructor(\n        private http: Http\n    ) { }\n\n    // get array of rss\n    getManyRss(): Promise<Feed[]> {\n        return this.get(this.rssUrl + '/' + this.sessionUser)\n            .then(res => {\n                let obj = JSON.parse(res.text(), Utility.parseJsonToFeed);\n                let feeds: Feed[] = [];\n                for (let i in obj) {\n                    feeds.push(new Feed(obj[i]));\n                }\n                return feeds as Feed[];\n            })\n            .catch(err => {\n                console.error('getManyRss: error ' + err);\n                return null;\n            });\n\n    }\n\n    // add new link\n    addLink(link: string): Promise<Feed> {\n        let json = {\n            \"link\": link,\n            \"user\": this.sessionUser\n        };\n        return this.post(JSON.stringify(json), this.rssUrl).then(res => {\n            let obj = JSON.parse(res.text(), Utility.parseJsonToFeed);\n            let feed = new Feed(obj);\n            return feed;\n        }).catch(err => {\n            console.error('addLink: an error ' + err);\n            return null;\n        });\n    }\n\n    // refesh the feed\n    refeshFeed(feed: Feed): Promise<Feed> {\n        let json = {\n            \"user\": this.sessionUser,\n            \"feed\": feed\n        };\n\n        return this.put(JSON.stringify(json), this.rssUrl)\n            .then(() => feed)\n            .catch(error => {\n                console.error('refeshFeed: ' + error);\n                return null;\n            });\n    }\n\n    // call get to server\n    private get(url: string): Promise<Response> {\n        return this.http.get(url)\n            .toPromise()\n            .then(res => {\n                console.log('get status code: ' + res.status);\n                // console.log('body response: ' + res.text());\n                return res;\n            })\n            .catch(this.handleError);\n    }\n\n    // call post to server\n    private post(json: string, url: string): Promise<Response> {\n        console.log('post chay voi gia tri: ' + JSON.stringify(json));\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n\n        return this.http.post(url, json, headers)\n            .toPromise()\n            .then(res => {\n                console.log('post status code: ' + res.status);\n                // console.log('body response: ' + res.text());\n                return res;\n            })\n            .catch(this.handleError);\n    }\n\n    // call put to server\n    private put(json: string, url: string): Promise<Response> {\n        console.log('chay put voi gia tri: ' + json);\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n\n        return this.http.put(url, json, headers)\n            .toPromise()\n            .then(res => {\n                console.log('put status code: ' + res.status);\n                // console.log('body response: ' + res.text());\n                return res;\n            })\n            .catch(this.handleError);\n\n    }\n\n    // handle error\n    private handleError(error: any): Promise<void> {\n        console.error('An error occurred', error.json());\n        switch (error.status) {\n            case 406:\n                alert(error.json() || error);\n                break;\n            case 404:\n                alert(error.json() || error);\n                break;\n            default:\n                alert('có lỗi lạ: ' + (error.json() || error));\n                break;\n        }\n        return Promise.reject(error);\n    }\n}\n\n\n"]}